{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Начальное состояние корзины\nconst initialState = {\n  cartItems: [],\n  // Элементы корзины\n  totalQuantity: 0,\n  // Общее количество\n  totalAmount: 0 // Общая сумма\n};\n\n// Создаем Redux slice (срез) для управления состоянием корзины\nconst cartSlice = createSlice({\n  name: 'cart',\n  // Название среза\n  initialState: initialState,\n  // Исходное состояние\n\n  reducers: {\n    addItem(state, action) {\n      const newItem = action.payload; // Новые товары\n      const existingItem = state.cartItems.find(item => item.id === newItem.id); // Существующий элемент\n      state.totalQuantity++; // Увеличиваем общее количество товаров в корзине\n\n      if (!existingItem) {\n        // Если товара с таким ID нет в корзине, добавляем новый элемент\n        state.cartItems.push({\n          id: newItem.id,\n          title: newItem.title,\n          image01: newItem.image01,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price\n        });\n      } else {\n        // Если товар с таким ID уже есть в корзине, увеличиваем количество и обновляем общую стоимость\n        existingItem.quantity++;\n        existingItem.totalPrice = Number(existingItem.totalPrice) + Number(newItem.price);\n      }\n      // Обновляем общую сумму корзины, просуммировав цену всех товаров в корзине\n      state.totalAmount = state.cartItems.reduce((total, item) => total + Number(item.price) * Number(item.quantity));\n    },\n    //Удаление продукта\n    removeItem(state, action) {\n      const id = action.payload;\n      const existingItem = state.cartItems.find(item => item.id === id); // Существующий элемент\n      state.totalQuantity--;\n      if (existingItem === 1) {\n        state.cartItems = state.cartItems.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = Number(existingItem.totalPrice) - Number(id.price);\n      }\n    }\n  }\n});\n\n// Экспортируем действия и редьюсеры для использования в Redux\nexport const cartAction = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","initialState","cartItems","totalQuantity","totalAmount","cartSlice","name","reducers","addItem","state","action","newItem","payload","existingItem","find","item","id","push","title","image01","price","quantity","totalPrice","Number","reduce","total","removeItem","filter","cartAction","actions"],"sources":["C:/ProjectProects/project-pizza/src/store/shopping-cart/cartSlice.js"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\r\n\r\n// Начальное состояние корзины\r\nconst initialState = {\r\n    cartItems: [],        // Элементы корзины\r\n    totalQuantity: 0,     // Общее количество\r\n    totalAmount: 0        // Общая сумма\r\n}\r\n\r\n// Создаем Redux slice (срез) для управления состоянием корзины\r\nconst cartSlice = createSlice({\r\n    name: 'cart',               // Название среза\r\n    initialState: initialState,  // Исходное состояние\r\n\r\n    reducers: {\r\n        addItem(state, action) {\r\n            const newItem = action.payload; // Новые товары\r\n            const existingItem = state.cartItems.find(item => item.id === newItem.id); // Существующий элемент\r\n            state.totalQuantity++; // Увеличиваем общее количество товаров в корзине\r\n\r\n            if (!existingItem) {\r\n                // Если товара с таким ID нет в корзине, добавляем новый элемент\r\n                state.cartItems.push(\r\n                    {\r\n                        id: newItem.id,\r\n                        title: newItem.title,\r\n                        image01: newItem.image01,\r\n                        price: newItem.price,\r\n                        quantity: 1,\r\n                        totalPrice: newItem.price,\r\n                    }\r\n                )\r\n            }\r\n            else {\r\n                // Если товар с таким ID уже есть в корзине, увеличиваем количество и обновляем общую стоимость\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = Number(existingItem.totalPrice) + Number(newItem.price);\r\n            }\r\n            // Обновляем общую сумму корзины, просуммировав цену всех товаров в корзине\r\n            state.totalAmount = state.cartItems.reduce((total, item) =>\r\n                (total + Number(item.price) * Number(item.quantity)));\r\n        },\r\n\r\n        //Удаление продукта\r\n        removeItem(state, action) {\r\n            const id = action.payload;\r\n            const existingItem = state.cartItems.find(item => item.id === id); // Существующий элемент\r\n            state.totalQuantity--;\r\n\r\n            if (existingItem === 1) {\r\n                state.cartItems = state.cartItems.filter(item =>item.id !== id);\r\n\r\n            }\r\n            else{\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = Number(existingItem.totalPrice) - Number(id.price);\r\n            }\r\n        }\r\n    },\r\n})\r\n\r\n// Экспортируем действия и редьюсеры для использования в Redux\r\nexport const cartAction = cartSlice.actions;\r\nexport default cartSlice;\r\n"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;;AAE5C;AACA,MAAMC,YAAY,GAAG;EACjBC,SAAS,EAAE,EAAE;EAAS;EACtBC,aAAa,EAAE,CAAC;EAAM;EACtBC,WAAW,EAAE,CAAC,CAAQ;AAC1B,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EAAgB;EAC5BL,YAAY,EAAEA,YAAY;EAAG;;EAE7BM,QAAQ,EAAE;IACNC,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACnB,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC;MAChC,MAAMC,YAAY,GAAGJ,KAAK,CAACP,SAAS,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC,CAAC,CAAC;MAC3EP,KAAK,CAACN,aAAa,EAAE,CAAC,CAAC;;MAEvB,IAAI,CAACU,YAAY,EAAE;QACf;QACAJ,KAAK,CAACP,SAAS,CAACe,IAAI,CAChB;UACID,EAAE,EAAEL,OAAO,CAACK,EAAE;UACdE,KAAK,EAAEP,OAAO,CAACO,KAAK;UACpBC,OAAO,EAAER,OAAO,CAACQ,OAAO;UACxBC,KAAK,EAAET,OAAO,CAACS,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAEX,OAAO,CAACS;QACxB,CACJ,CAAC;MACL,CAAC,MACI;QACD;QACAP,YAAY,CAACQ,QAAQ,EAAE;QACvBR,YAAY,CAACS,UAAU,GAAGC,MAAM,CAACV,YAAY,CAACS,UAAU,CAAC,GAAGC,MAAM,CAACZ,OAAO,CAACS,KAAK,CAAC;MACrF;MACA;MACAX,KAAK,CAACL,WAAW,GAAGK,KAAK,CAACP,SAAS,CAACsB,MAAM,CAAC,CAACC,KAAK,EAAEV,IAAI,KAClDU,KAAK,GAAGF,MAAM,CAACR,IAAI,CAACK,KAAK,CAAC,GAAGG,MAAM,CAACR,IAAI,CAACM,QAAQ,CAAE,CAAC;IAC7D,CAAC;IAED;IACAK,UAAUA,CAACjB,KAAK,EAAEC,MAAM,EAAE;MACtB,MAAMM,EAAE,GAAGN,MAAM,CAACE,OAAO;MACzB,MAAMC,YAAY,GAAGJ,KAAK,CAACP,SAAS,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;MACnEP,KAAK,CAACN,aAAa,EAAE;MAErB,IAAIU,YAAY,KAAK,CAAC,EAAE;QACpBJ,KAAK,CAACP,SAAS,GAAGO,KAAK,CAACP,SAAS,CAACyB,MAAM,CAACZ,IAAI,IAAGA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAEnE,CAAC,MACG;QACAH,YAAY,CAACQ,QAAQ,EAAE;QACvBR,YAAY,CAACS,UAAU,GAAGC,MAAM,CAACV,YAAY,CAACS,UAAU,CAAC,GAAGC,MAAM,CAACP,EAAE,CAACI,KAAK,CAAC;MAChF;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMQ,UAAU,GAAGvB,SAAS,CAACwB,OAAO;AAC3C,eAAexB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}